{"ast":null,"code":"// admin/src/services/api.js - Servizi API Completi\n\nimport axios from 'axios';\n\n// ==========================================\n// CONFIGURAZIONE AXIOS\n// ==========================================\nconst API_BASE_URL = process.env.REACT_APP_API_BASE_URL || 'http://localhost:3001';\nconst WS_URL = process.env.REACT_APP_WS_URL || 'http://localhost:3001';\n\n// Crea istanza axios con configurazione base\nconst apiClient = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 30000,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Interceptor per aggiungere token di autenticazione\napiClient.interceptors.request.use(config => {\n  var _config$method;\n  const token = localStorage.getItem('adminToken');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  console.log(`[API] ${(_config$method = config.method) === null || _config$method === void 0 ? void 0 : _config$method.toUpperCase()} ${config.url}`);\n  return config;\n}, error => {\n  console.error('[API] Request error:', error);\n  return Promise.reject(error);\n});\n\n// Interceptor per gestire risposte e errori\napiClient.interceptors.response.use(response => {\n  var _response$config$meth;\n  console.log(`[API] ✅ ${(_response$config$meth = response.config.method) === null || _response$config$meth === void 0 ? void 0 : _response$config$meth.toUpperCase()} ${response.config.url} - ${response.status}`);\n  return response;\n}, error => {\n  var _error$config, _error$config$method, _error$config2, _error$response, _error$response2, _error$response3, _error$response3$data, _error$response4, _error$response4$data, _error$response5;\n  console.error(`[API] ❌ ${(_error$config = error.config) === null || _error$config === void 0 ? void 0 : (_error$config$method = _error$config.method) === null || _error$config$method === void 0 ? void 0 : _error$config$method.toUpperCase()} ${(_error$config2 = error.config) === null || _error$config2 === void 0 ? void 0 : _error$config2.url} - ${(_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status}`);\n\n  // Gestisci errori di autenticazione\n  if (((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.status) === 401) {\n    localStorage.removeItem('adminToken');\n    window.location.href = '/admin';\n  }\n\n  // Gestisci errori di rete\n  if (!error.response) {\n    throw new Error('Errore di connessione al server');\n  }\n\n  // Throw error con messaggio appropriato\n  const message = ((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.error) || ((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : (_error$response4$data = _error$response4.data) === null || _error$response4$data === void 0 ? void 0 : _error$response4$data.message) || `Errore ${(_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : _error$response5.status}`;\n  throw new Error(message);\n});\n\n// ==========================================\n// API DASHBOARD\n// ==========================================\nexport const dashboardAPI = {\n  // Statistiche generali\n  async getStats() {\n    const response = await apiClient.get('/api/admin/stats');\n    return response.data;\n  },\n  // Stato sistema\n  async getSystemStatus() {\n    const response = await apiClient.get('/api/admin/system/status');\n    return response.data;\n  },\n  // Attività recenti\n  async getRecentActivity(limit = 50) {\n    const response = await apiClient.get(`/api/admin/activity?limit=${limit}`);\n    return response.data;\n  },\n  // Dati real-time\n  async getRealTimeData() {\n    const response = await apiClient.get('/api/admin/realtime');\n    return response.data;\n  },\n  // Health check\n  async healthCheck() {\n    const response = await apiClient.get('/api/health');\n    return response.data;\n  }\n};\n\n// ==========================================\n// API ELEZIONI\n// ==========================================\nexport const electionsAPI = {\n  // Lista elezioni\n  async getElections(params = {}) {\n    const queryString = new URLSearchParams(params).toString();\n    const response = await apiClient.get(`/api/admin/elections?${queryString}`);\n    return response.data;\n  },\n  // Dettaglio elezione\n  async getElection(id) {\n    const response = await apiClient.get(`/api/admin/elections/${id}`);\n    return response.data;\n  },\n  // Crea elezione\n  async createElection(data) {\n    const response = await apiClient.post('/api/admin/elections', data);\n    return response.data;\n  },\n  // Aggiorna elezione\n  async updateElection(id, data) {\n    const response = await apiClient.put(`/api/admin/elections/${id}`, data);\n    return response.data;\n  },\n  // Elimina elezione\n  async deleteElection(id) {\n    const response = await apiClient.delete(`/api/admin/elections/${id}`);\n    return response.data;\n  },\n  // Avvia elezione\n  async startElection(id) {\n    const response = await apiClient.post(`/api/admin/elections/${id}/start`);\n    return response.data;\n  },\n  // Ferma elezione\n  async stopElection(id) {\n    const response = await apiClient.post(`/api/admin/elections/${id}/stop`);\n    return response.data;\n  },\n  // Risultati elezione\n  async getElectionResults(id) {\n    const response = await apiClient.get(`/api/admin/elections/${id}/results`);\n    return response.data;\n  },\n  // Statistiche elezione\n  async getElectionStats(id) {\n    const response = await apiClient.get(`/api/admin/elections/${id}/stats`);\n    return response.data;\n  }\n};\n\n// ==========================================\n// API UTENTI\n// ==========================================\nexport const usersAPI = {\n  // Lista utenti con paginazione\n  async getUsers(params = {}) {\n    const queryString = new URLSearchParams(params).toString();\n    const response = await apiClient.get(`/api/admin/users?${queryString}`);\n    return response.data;\n  },\n  // Dettaglio utente\n  async getUser(id) {\n    const response = await apiClient.get(`/api/admin/users/${id}`);\n    return response.data;\n  },\n  // Aggiorna stato utente\n  async updateUserStatus(id, status) {\n    const response = await apiClient.patch(`/api/admin/users/${id}/status`, {\n      status\n    });\n    return response.data;\n  },\n  // Elimina utente\n  async deleteUser(id) {\n    const response = await apiClient.delete(`/api/admin/users/${id}`);\n    return response.data;\n  },\n  // Lista whitelist\n  async getWhitelist() {\n    const response = await apiClient.get('/api/admin/whitelist');\n    return response.data;\n  },\n  // Aggiungi alla whitelist\n  async addToWhitelist(userData) {\n    const response = await apiClient.post('/api/admin/whitelist', userData);\n    return response.data;\n  },\n  // Rimuovi dalla whitelist\n  async removeFromWhitelist(email) {\n    const response = await apiClient.delete(`/api/admin/whitelist/${encodeURIComponent(email)}`);\n    return response.data;\n  },\n  // Statistiche registrazioni\n  async getRegistrationStats() {\n    const response = await apiClient.get('/api/admin/users/stats');\n    return response.data;\n  },\n  // Esporta utenti\n  async exportUsers(format = 'csv') {\n    const response = await apiClient.get(`/api/admin/users/export?format=${format}`, {\n      responseType: 'blob'\n    });\n    return response.data;\n  },\n  // Reset password utente\n  async resetUserPassword(id) {\n    const response = await apiClient.post(`/api/admin/users/${id}/reset-password`);\n    return response.data;\n  },\n  // Invia credenziali utente\n  async sendUserCredentials(id) {\n    const response = await apiClient.post(`/api/admin/users/${id}/send-credentials`);\n    return response.data;\n  }\n};\n\n// ==========================================\n// API BLOCKCHAIN & SISTEMA\n// ==========================================\nexport const systemAPI = {\n  // Stato blockchain\n  async getBlockchainStatus() {\n    const response = await apiClient.get('/api/admin/blockchain/status');\n    return response.data;\n  },\n  // Informazioni blocco\n  async getBlockInfo(blockNumber) {\n    const response = await apiClient.get(`/api/admin/blockchain/block/${blockNumber}`);\n    return response.data;\n  },\n  // Transazioni recenti\n  async getRecentTransactions(limit = 20) {\n    const response = await apiClient.get(`/api/admin/blockchain/transactions?limit=${limit}`);\n    return response.data;\n  },\n  // Impostazioni sistema\n  async getSettings() {\n    const response = await apiClient.get('/api/admin/settings');\n    return response.data;\n  },\n  // Aggiorna impostazioni\n  async updateSettings(settings) {\n    const response = await apiClient.put('/api/admin/settings', settings);\n    return response.data;\n  },\n  // Backup database\n  async createBackup() {\n    const response = await apiClient.post('/api/admin/backup');\n    return response.data;\n  },\n  // Lista backup\n  async getBackups() {\n    const response = await apiClient.get('/api/admin/backups');\n    return response.data;\n  },\n  // Elimina backup\n  async deleteBackup(backupId) {\n    const response = await apiClient.delete(`/api/admin/backups/${backupId}`);\n    return response.data;\n  },\n  // Ripristina backup\n  async restoreBackup(backupId) {\n    const response = await apiClient.post(`/api/admin/backups/${backupId}/restore`);\n    return response.data;\n  },\n  // Scarica backup\n  async downloadBackup(backupId) {\n    const response = await apiClient.get(`/api/admin/backups/${backupId}/download`, {\n      responseType: 'blob'\n    });\n    return response.data;\n  },\n  // Log di sistema\n  async getSystemLogs(level = 'all', limit = 100) {\n    const response = await apiClient.get(`/api/admin/logs?level=${level}&limit=${limit}`);\n    return response.data;\n  },\n  // Cancella log\n  async clearLogs() {\n    const response = await apiClient.delete('/api/admin/logs');\n    return response.data;\n  },\n  // Metriche performance\n  async getPerformanceMetrics() {\n    const response = await apiClient.get('/api/admin/metrics/performance');\n    return response.data;\n  },\n  // Statistiche utilizzo\n  async getUsageStats(period = '24h') {\n    const response = await apiClient.get(`/api/admin/metrics/usage?period=${period}`);\n    return response.data;\n  }\n};\n\n// ==========================================\n// API AUTENTICAZIONE ADMIN\n// ==========================================\nexport const authAPI = {\n  // Login admin\n  async login(credentials) {\n    const response = await apiClient.post('/api/admin/auth/login', credentials);\n    if (response.data.token) {\n      localStorage.setItem('adminToken', response.data.token);\n    }\n    return response.data;\n  },\n  // Logout admin\n  async logout() {\n    localStorage.removeItem('adminToken');\n    try {\n      await apiClient.post('/api/admin/auth/logout');\n    } catch (error) {\n      // Ignora errori durante logout\n      console.warn('Errore durante logout:', error);\n    }\n  },\n  // Verifica token\n  async verifyToken() {\n    const response = await apiClient.get('/api/admin/auth/verify');\n    return response.data;\n  },\n  // Cambia password admin\n  async changePassword(currentPassword, newPassword) {\n    const response = await apiClient.post('/api/admin/auth/change-password', {\n      currentPassword,\n      newPassword\n    });\n    return response.data;\n  },\n  // Lista sessioni attive\n  async getActiveSessions() {\n    const response = await apiClient.get('/api/admin/auth/sessions');\n    return response.data;\n  },\n  // Termina sessione specifica\n  async terminateSession(sessionId) {\n    const response = await apiClient.delete(`/api/admin/auth/sessions/${sessionId}`);\n    return response.data;\n  }\n};\n\n// ==========================================\n// API NOTIFICHE\n// ==========================================\nexport const notificationsAPI = {\n  // Lista notifiche\n  async getNotifications(params = {}) {\n    const queryString = new URLSearchParams(params).toString();\n    const response = await apiClient.get(`/api/admin/notifications?${queryString}`);\n    return response.data;\n  },\n  // Segna come letta\n  async markAsRead(notificationId) {\n    const response = await apiClient.patch(`/api/admin/notifications/${notificationId}/read`);\n    return response.data;\n  },\n  // Segna tutte come lette\n  async markAllAsRead() {\n    const response = await apiClient.patch('/api/admin/notifications/read-all');\n    return response.data;\n  },\n  // Invia notifica\n  async sendNotification(data) {\n    const response = await apiClient.post('/api/admin/notifications', data);\n    return response.data;\n  },\n  // Elimina notifica\n  async deleteNotification(notificationId) {\n    const response = await apiClient.delete(`/api/admin/notifications/${notificationId}`);\n    return response.data;\n  }\n};\n\n// ==========================================\n// WEBSOCKET CONNECTION\n// ==========================================\nexport class AdminWebSocket {\n  constructor() {\n    this.ws = null;\n    this.reconnectAttempts = 0;\n    this.maxReconnectAttempts = 5;\n    this.reconnectDelay = 1000;\n    this.listeners = new Map();\n  }\n  connect() {\n    try {\n      const token = localStorage.getItem('adminToken');\n      if (!token) {\n        console.warn('[WS] No auth token available');\n        return;\n      }\n      const wsUrl = `${WS_URL.replace('http', 'ws')}/ws/admin?token=${token}`;\n      this.ws = new WebSocket(wsUrl);\n      this.ws.onopen = () => {\n        console.log('[WS] ✅ Connected to admin WebSocket');\n        this.reconnectAttempts = 0;\n        this.emit('connected');\n      };\n      this.ws.onmessage = event => {\n        try {\n          const data = JSON.parse(event.data);\n          console.log('[WS] 📨 Message received:', data.type);\n          this.emit(data.type, data.payload);\n        } catch (error) {\n          console.error('[WS] Error parsing message:', error);\n        }\n      };\n      this.ws.onclose = event => {\n        console.log('[WS] Connection closed:', event.code, event.reason);\n        this.emit('disconnected');\n        this.handleReconnect();\n      };\n      this.ws.onerror = error => {\n        console.error('[WS] Error:', error);\n        this.emit('error', error);\n      };\n    } catch (error) {\n      console.error('[WS] Connection error:', error);\n    }\n  }\n  disconnect() {\n    if (this.ws) {\n      this.ws.close();\n      this.ws = null;\n    }\n  }\n  handleReconnect() {\n    if (this.reconnectAttempts < this.maxReconnectAttempts) {\n      this.reconnectAttempts++;\n      const delay = this.reconnectDelay * Math.pow(2, this.reconnectAttempts - 1);\n      console.log(`[WS] Reconnecting in ${delay}ms (attempt ${this.reconnectAttempts}/${this.maxReconnectAttempts})`);\n      setTimeout(() => {\n        this.connect();\n      }, delay);\n    } else {\n      console.error('[WS] Max reconnection attempts reached');\n      this.emit('reconnection_failed');\n    }\n  }\n  on(event, callback) {\n    if (!this.listeners.has(event)) {\n      this.listeners.set(event, []);\n    }\n    this.listeners.get(event).push(callback);\n  }\n  off(event, callback) {\n    if (this.listeners.has(event)) {\n      const callbacks = this.listeners.get(event);\n      const index = callbacks.indexOf(callback);\n      if (index !== -1) {\n        callbacks.splice(index, 1);\n      }\n    }\n  }\n  emit(event, data) {\n    if (this.listeners.has(event)) {\n      this.listeners.get(event).forEach(callback => {\n        try {\n          callback(data);\n        } catch (error) {\n          console.error(`[WS] Error in event callback for ${event}:`, error);\n        }\n      });\n    }\n  }\n  send(type, payload) {\n    if (this.ws && this.ws.readyState === WebSocket.OPEN) {\n      this.ws.send(JSON.stringify({\n        type,\n        payload\n      }));\n    } else {\n      console.warn('[WS] Cannot send message - not connected');\n    }\n  }\n}\n\n// Istanza globale WebSocket\nexport const adminWS = new AdminWebSocket();\n\n// ==========================================\n// UTILITY FUNCTIONS\n// ==========================================\nexport const apiUtils = {\n  // Formatta errori per UI\n  formatError(error) {\n    var _error$response6, _error$response6$data;\n    if ((_error$response6 = error.response) !== null && _error$response6 !== void 0 && (_error$response6$data = _error$response6.data) !== null && _error$response6$data !== void 0 && _error$response6$data.message) {\n      return error.response.data.message;\n    }\n    if (error.message) {\n      return error.message;\n    }\n    return 'Si è verificato un errore sconosciuto';\n  },\n  // Download file da blob\n  downloadBlob(blob, filename) {\n    const url = window.URL.createObjectURL(blob);\n    const link = document.createElement('a');\n    link.href = url;\n    link.setAttribute('download', filename);\n    document.body.appendChild(link);\n    link.click();\n    link.remove();\n    window.URL.revokeObjectURL(url);\n  },\n  // Formatta dimensione file\n  formatFileSize(bytes) {\n    if (bytes === 0) return '0 Bytes';\n    const k = 1024;\n    const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n  },\n  // Polling per operazioni asincrone\n  async pollOperation(operationId, checkFn, interval = 1000, maxAttempts = 60) {\n    for (let i = 0; i < maxAttempts; i++) {\n      try {\n        const result = await checkFn(operationId);\n        if (result.completed) {\n          return result;\n        }\n        await new Promise(resolve => setTimeout(resolve, interval));\n      } catch (error) {\n        if (i === maxAttempts - 1) throw error;\n        await new Promise(resolve => setTimeout(resolve, interval));\n      }\n    }\n    throw new Error('Operation timeout');\n  }\n};\n\n// ==========================================\n// EXPORT DEFAULT\n// ==========================================\nexport default {\n  dashboardAPI,\n  electionsAPI,\n  usersAPI,\n  systemAPI,\n  authAPI,\n  notificationsAPI,\n  adminWS,\n  apiUtils\n};","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_BASE_URL","WS_URL","REACT_APP_WS_URL","apiClient","create","baseURL","timeout","headers","interceptors","request","use","config","_config$method","token","localStorage","getItem","Authorization","console","log","method","toUpperCase","url","error","Promise","reject","response","_response$config$meth","status","_error$config","_error$config$method","_error$config2","_error$response","_error$response2","_error$response3","_error$response3$data","_error$response4","_error$response4$data","_error$response5","removeItem","window","location","href","Error","message","data","dashboardAPI","getStats","get","getSystemStatus","getRecentActivity","limit","getRealTimeData","healthCheck","electionsAPI","getElections","params","queryString","URLSearchParams","toString","getElection","id","createElection","post","updateElection","put","deleteElection","delete","startElection","stopElection","getElectionResults","getElectionStats","usersAPI","getUsers","getUser","updateUserStatus","patch","deleteUser","getWhitelist","addToWhitelist","userData","removeFromWhitelist","email","encodeURIComponent","getRegistrationStats","exportUsers","format","responseType","resetUserPassword","sendUserCredentials","systemAPI","getBlockchainStatus","getBlockInfo","blockNumber","getRecentTransactions","getSettings","updateSettings","settings","createBackup","getBackups","deleteBackup","backupId","restoreBackup","downloadBackup","getSystemLogs","level","clearLogs","getPerformanceMetrics","getUsageStats","period","authAPI","login","credentials","setItem","logout","warn","verifyToken","changePassword","currentPassword","newPassword","getActiveSessions","terminateSession","sessionId","notificationsAPI","getNotifications","markAsRead","notificationId","markAllAsRead","sendNotification","deleteNotification","AdminWebSocket","constructor","ws","reconnectAttempts","maxReconnectAttempts","reconnectDelay","listeners","Map","connect","wsUrl","replace","WebSocket","onopen","emit","onmessage","event","JSON","parse","type","payload","onclose","code","reason","handleReconnect","onerror","disconnect","close","delay","Math","pow","setTimeout","on","callback","has","set","push","off","callbacks","index","indexOf","splice","forEach","send","readyState","OPEN","stringify","adminWS","apiUtils","formatError","_error$response6","_error$response6$data","downloadBlob","blob","filename","URL","createObjectURL","link","document","createElement","setAttribute","body","appendChild","click","remove","revokeObjectURL","formatFileSize","bytes","k","sizes","i","floor","parseFloat","toFixed","pollOperation","operationId","checkFn","interval","maxAttempts","result","completed","resolve"],"sources":["/Users/fabiopaccosi/Projects/Personale/wabisabi_evoting/admin/src/services/api.js"],"sourcesContent":["// admin/src/services/api.js - Servizi API Completi\n\nimport axios from 'axios';\n\n// ==========================================\n// CONFIGURAZIONE AXIOS\n// ==========================================\nconst API_BASE_URL = process.env.REACT_APP_API_BASE_URL || 'http://localhost:3001';\nconst WS_URL = process.env.REACT_APP_WS_URL || 'http://localhost:3001';\n\n// Crea istanza axios con configurazione base\nconst apiClient = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 30000,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Interceptor per aggiungere token di autenticazione\napiClient.interceptors.request.use(\n  (config) => {\n    const token = localStorage.getItem('adminToken');\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    console.log(`[API] ${config.method?.toUpperCase()} ${config.url}`);\n    return config;\n  },\n  (error) => {\n    console.error('[API] Request error:', error);\n    return Promise.reject(error);\n  }\n);\n\n// Interceptor per gestire risposte e errori\napiClient.interceptors.response.use(\n  (response) => {\n    console.log(`[API] ✅ ${response.config.method?.toUpperCase()} ${response.config.url} - ${response.status}`);\n    return response;\n  },\n  (error) => {\n    console.error(`[API] ❌ ${error.config?.method?.toUpperCase()} ${error.config?.url} - ${error.response?.status}`);\n    \n    // Gestisci errori di autenticazione\n    if (error.response?.status === 401) {\n      localStorage.removeItem('adminToken');\n      window.location.href = '/admin';\n    }\n    \n    // Gestisci errori di rete\n    if (!error.response) {\n      throw new Error('Errore di connessione al server');\n    }\n    \n    // Throw error con messaggio appropriato\n    const message = error.response?.data?.error || \n                   error.response?.data?.message || \n                   `Errore ${error.response?.status}`;\n    throw new Error(message);\n  }\n);\n\n// ==========================================\n// API DASHBOARD\n// ==========================================\nexport const dashboardAPI = {\n  // Statistiche generali\n  async getStats() {\n    const response = await apiClient.get('/api/admin/stats');\n    return response.data;\n  },\n\n  // Stato sistema\n  async getSystemStatus() {\n    const response = await apiClient.get('/api/admin/system/status');\n    return response.data;\n  },\n\n  // Attività recenti\n  async getRecentActivity(limit = 50) {\n    const response = await apiClient.get(`/api/admin/activity?limit=${limit}`);\n    return response.data;\n  },\n\n  // Dati real-time\n  async getRealTimeData() {\n    const response = await apiClient.get('/api/admin/realtime');\n    return response.data;\n  },\n\n  // Health check\n  async healthCheck() {\n    const response = await apiClient.get('/api/health');\n    return response.data;\n  }\n};\n\n// ==========================================\n// API ELEZIONI\n// ==========================================\nexport const electionsAPI = {\n  // Lista elezioni\n  async getElections(params = {}) {\n    const queryString = new URLSearchParams(params).toString();\n    const response = await apiClient.get(`/api/admin/elections?${queryString}`);\n    return response.data;\n  },\n\n  // Dettaglio elezione\n  async getElection(id) {\n    const response = await apiClient.get(`/api/admin/elections/${id}`);\n    return response.data;\n  },\n\n  // Crea elezione\n  async createElection(data) {\n    const response = await apiClient.post('/api/admin/elections', data);\n    return response.data;\n  },\n\n  // Aggiorna elezione\n  async updateElection(id, data) {\n    const response = await apiClient.put(`/api/admin/elections/${id}`, data);\n    return response.data;\n  },\n\n  // Elimina elezione\n  async deleteElection(id) {\n    const response = await apiClient.delete(`/api/admin/elections/${id}`);\n    return response.data;\n  },\n\n  // Avvia elezione\n  async startElection(id) {\n    const response = await apiClient.post(`/api/admin/elections/${id}/start`);\n    return response.data;\n  },\n\n  // Ferma elezione\n  async stopElection(id) {\n    const response = await apiClient.post(`/api/admin/elections/${id}/stop`);\n    return response.data;\n  },\n\n  // Risultati elezione\n  async getElectionResults(id) {\n    const response = await apiClient.get(`/api/admin/elections/${id}/results`);\n    return response.data;\n  },\n\n  // Statistiche elezione\n  async getElectionStats(id) {\n    const response = await apiClient.get(`/api/admin/elections/${id}/stats`);\n    return response.data;\n  }\n};\n\n// ==========================================\n// API UTENTI\n// ==========================================\nexport const usersAPI = {\n  // Lista utenti con paginazione\n  async getUsers(params = {}) {\n    const queryString = new URLSearchParams(params).toString();\n    const response = await apiClient.get(`/api/admin/users?${queryString}`);\n    return response.data;\n  },\n\n  // Dettaglio utente\n  async getUser(id) {\n    const response = await apiClient.get(`/api/admin/users/${id}`);\n    return response.data;\n  },\n\n  // Aggiorna stato utente\n  async updateUserStatus(id, status) {\n    const response = await apiClient.patch(`/api/admin/users/${id}/status`, { status });\n    return response.data;\n  },\n\n  // Elimina utente\n  async deleteUser(id) {\n    const response = await apiClient.delete(`/api/admin/users/${id}`);\n    return response.data;\n  },\n\n  // Lista whitelist\n  async getWhitelist() {\n    const response = await apiClient.get('/api/admin/whitelist');\n    return response.data;\n  },\n\n  // Aggiungi alla whitelist\n  async addToWhitelist(userData) {\n    const response = await apiClient.post('/api/admin/whitelist', userData);\n    return response.data;\n  },\n\n  // Rimuovi dalla whitelist\n  async removeFromWhitelist(email) {\n    const response = await apiClient.delete(`/api/admin/whitelist/${encodeURIComponent(email)}`);\n    return response.data;\n  },\n\n  // Statistiche registrazioni\n  async getRegistrationStats() {\n    const response = await apiClient.get('/api/admin/users/stats');\n    return response.data;\n  },\n\n  // Esporta utenti\n  async exportUsers(format = 'csv') {\n    const response = await apiClient.get(`/api/admin/users/export?format=${format}`, {\n      responseType: 'blob'\n    });\n    return response.data;\n  },\n\n  // Reset password utente\n  async resetUserPassword(id) {\n    const response = await apiClient.post(`/api/admin/users/${id}/reset-password`);\n    return response.data;\n  },\n\n  // Invia credenziali utente\n  async sendUserCredentials(id) {\n    const response = await apiClient.post(`/api/admin/users/${id}/send-credentials`);\n    return response.data;\n  }\n};\n\n// ==========================================\n// API BLOCKCHAIN & SISTEMA\n// ==========================================\nexport const systemAPI = {\n  // Stato blockchain\n  async getBlockchainStatus() {\n    const response = await apiClient.get('/api/admin/blockchain/status');\n    return response.data;\n  },\n\n  // Informazioni blocco\n  async getBlockInfo(blockNumber) {\n    const response = await apiClient.get(`/api/admin/blockchain/block/${blockNumber}`);\n    return response.data;\n  },\n\n  // Transazioni recenti\n  async getRecentTransactions(limit = 20) {\n    const response = await apiClient.get(`/api/admin/blockchain/transactions?limit=${limit}`);\n    return response.data;\n  },\n\n  // Impostazioni sistema\n  async getSettings() {\n    const response = await apiClient.get('/api/admin/settings');\n    return response.data;\n  },\n\n  // Aggiorna impostazioni\n  async updateSettings(settings) {\n    const response = await apiClient.put('/api/admin/settings', settings);\n    return response.data;\n  },\n\n  // Backup database\n  async createBackup() {\n    const response = await apiClient.post('/api/admin/backup');\n    return response.data;\n  },\n\n  // Lista backup\n  async getBackups() {\n    const response = await apiClient.get('/api/admin/backups');\n    return response.data;\n  },\n\n  // Elimina backup\n  async deleteBackup(backupId) {\n    const response = await apiClient.delete(`/api/admin/backups/${backupId}`);\n    return response.data;\n  },\n\n  // Ripristina backup\n  async restoreBackup(backupId) {\n    const response = await apiClient.post(`/api/admin/backups/${backupId}/restore`);\n    return response.data;\n  },\n\n  // Scarica backup\n  async downloadBackup(backupId) {\n    const response = await apiClient.get(`/api/admin/backups/${backupId}/download`, {\n      responseType: 'blob'\n    });\n    return response.data;\n  },\n\n  // Log di sistema\n  async getSystemLogs(level = 'all', limit = 100) {\n    const response = await apiClient.get(`/api/admin/logs?level=${level}&limit=${limit}`);\n    return response.data;\n  },\n\n  // Cancella log\n  async clearLogs() {\n    const response = await apiClient.delete('/api/admin/logs');\n    return response.data;\n  },\n\n  // Metriche performance\n  async getPerformanceMetrics() {\n    const response = await apiClient.get('/api/admin/metrics/performance');\n    return response.data;\n  },\n\n  // Statistiche utilizzo\n  async getUsageStats(period = '24h') {\n    const response = await apiClient.get(`/api/admin/metrics/usage?period=${period}`);\n    return response.data;\n  }\n};\n\n// ==========================================\n// API AUTENTICAZIONE ADMIN\n// ==========================================\nexport const authAPI = {\n  // Login admin\n  async login(credentials) {\n    const response = await apiClient.post('/api/admin/auth/login', credentials);\n    if (response.data.token) {\n      localStorage.setItem('adminToken', response.data.token);\n    }\n    return response.data;\n  },\n\n  // Logout admin\n  async logout() {\n    localStorage.removeItem('adminToken');\n    try {\n      await apiClient.post('/api/admin/auth/logout');\n    } catch (error) {\n      // Ignora errori durante logout\n      console.warn('Errore durante logout:', error);\n    }\n  },\n\n  // Verifica token\n  async verifyToken() {\n    const response = await apiClient.get('/api/admin/auth/verify');\n    return response.data;\n  },\n\n  // Cambia password admin\n  async changePassword(currentPassword, newPassword) {\n    const response = await apiClient.post('/api/admin/auth/change-password', {\n      currentPassword,\n      newPassword\n    });\n    return response.data;\n  },\n\n  // Lista sessioni attive\n  async getActiveSessions() {\n    const response = await apiClient.get('/api/admin/auth/sessions');\n    return response.data;\n  },\n\n  // Termina sessione specifica\n  async terminateSession(sessionId) {\n    const response = await apiClient.delete(`/api/admin/auth/sessions/${sessionId}`);\n    return response.data;\n  }\n};\n\n// ==========================================\n// API NOTIFICHE\n// ==========================================\nexport const notificationsAPI = {\n  // Lista notifiche\n  async getNotifications(params = {}) {\n    const queryString = new URLSearchParams(params).toString();\n    const response = await apiClient.get(`/api/admin/notifications?${queryString}`);\n    return response.data;\n  },\n\n  // Segna come letta\n  async markAsRead(notificationId) {\n    const response = await apiClient.patch(`/api/admin/notifications/${notificationId}/read`);\n    return response.data;\n  },\n\n  // Segna tutte come lette\n  async markAllAsRead() {\n    const response = await apiClient.patch('/api/admin/notifications/read-all');\n    return response.data;\n  },\n\n  // Invia notifica\n  async sendNotification(data) {\n    const response = await apiClient.post('/api/admin/notifications', data);\n    return response.data;\n  },\n\n  // Elimina notifica\n  async deleteNotification(notificationId) {\n    const response = await apiClient.delete(`/api/admin/notifications/${notificationId}`);\n    return response.data;\n  }\n};\n\n// ==========================================\n// WEBSOCKET CONNECTION\n// ==========================================\nexport class AdminWebSocket {\n  constructor() {\n    this.ws = null;\n    this.reconnectAttempts = 0;\n    this.maxReconnectAttempts = 5;\n    this.reconnectDelay = 1000;\n    this.listeners = new Map();\n  }\n\n  connect() {\n    try {\n      const token = localStorage.getItem('adminToken');\n      if (!token) {\n        console.warn('[WS] No auth token available');\n        return;\n      }\n\n      const wsUrl = `${WS_URL.replace('http', 'ws')}/ws/admin?token=${token}`;\n      this.ws = new WebSocket(wsUrl);\n\n      this.ws.onopen = () => {\n        console.log('[WS] ✅ Connected to admin WebSocket');\n        this.reconnectAttempts = 0;\n        this.emit('connected');\n      };\n\n      this.ws.onmessage = (event) => {\n        try {\n          const data = JSON.parse(event.data);\n          console.log('[WS] 📨 Message received:', data.type);\n          this.emit(data.type, data.payload);\n        } catch (error) {\n          console.error('[WS] Error parsing message:', error);\n        }\n      };\n\n      this.ws.onclose = (event) => {\n        console.log('[WS] Connection closed:', event.code, event.reason);\n        this.emit('disconnected');\n        this.handleReconnect();\n      };\n\n      this.ws.onerror = (error) => {\n        console.error('[WS] Error:', error);\n        this.emit('error', error);\n      };\n\n    } catch (error) {\n      console.error('[WS] Connection error:', error);\n    }\n  }\n\n  disconnect() {\n    if (this.ws) {\n      this.ws.close();\n      this.ws = null;\n    }\n  }\n\n  handleReconnect() {\n    if (this.reconnectAttempts < this.maxReconnectAttempts) {\n      this.reconnectAttempts++;\n      const delay = this.reconnectDelay * Math.pow(2, this.reconnectAttempts - 1);\n      \n      console.log(`[WS] Reconnecting in ${delay}ms (attempt ${this.reconnectAttempts}/${this.maxReconnectAttempts})`);\n      \n      setTimeout(() => {\n        this.connect();\n      }, delay);\n    } else {\n      console.error('[WS] Max reconnection attempts reached');\n      this.emit('reconnection_failed');\n    }\n  }\n\n  on(event, callback) {\n    if (!this.listeners.has(event)) {\n      this.listeners.set(event, []);\n    }\n    this.listeners.get(event).push(callback);\n  }\n\n  off(event, callback) {\n    if (this.listeners.has(event)) {\n      const callbacks = this.listeners.get(event);\n      const index = callbacks.indexOf(callback);\n      if (index !== -1) {\n        callbacks.splice(index, 1);\n      }\n    }\n  }\n\n  emit(event, data) {\n    if (this.listeners.has(event)) {\n      this.listeners.get(event).forEach(callback => {\n        try {\n          callback(data);\n        } catch (error) {\n          console.error(`[WS] Error in event callback for ${event}:`, error);\n        }\n      });\n    }\n  }\n\n  send(type, payload) {\n    if (this.ws && this.ws.readyState === WebSocket.OPEN) {\n      this.ws.send(JSON.stringify({ type, payload }));\n    } else {\n      console.warn('[WS] Cannot send message - not connected');\n    }\n  }\n}\n\n// Istanza globale WebSocket\nexport const adminWS = new AdminWebSocket();\n\n// ==========================================\n// UTILITY FUNCTIONS\n// ==========================================\nexport const apiUtils = {\n  // Formatta errori per UI\n  formatError(error) {\n    if (error.response?.data?.message) {\n      return error.response.data.message;\n    }\n    if (error.message) {\n      return error.message;\n    }\n    return 'Si è verificato un errore sconosciuto';\n  },\n\n  // Download file da blob\n  downloadBlob(blob, filename) {\n    const url = window.URL.createObjectURL(blob);\n    const link = document.createElement('a');\n    link.href = url;\n    link.setAttribute('download', filename);\n    document.body.appendChild(link);\n    link.click();\n    link.remove();\n    window.URL.revokeObjectURL(url);\n  },\n\n  // Formatta dimensione file\n  formatFileSize(bytes) {\n    if (bytes === 0) return '0 Bytes';\n    const k = 1024;\n    const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n  },\n\n  // Polling per operazioni asincrone\n  async pollOperation(operationId, checkFn, interval = 1000, maxAttempts = 60) {\n    for (let i = 0; i < maxAttempts; i++) {\n      try {\n        const result = await checkFn(operationId);\n        if (result.completed) {\n          return result;\n        }\n        await new Promise(resolve => setTimeout(resolve, interval));\n      } catch (error) {\n        if (i === maxAttempts - 1) throw error;\n        await new Promise(resolve => setTimeout(resolve, interval));\n      }\n    }\n    throw new Error('Operation timeout');\n  }\n};\n\n// ==========================================\n// EXPORT DEFAULT\n// ==========================================\nexport default {\n  dashboardAPI,\n  electionsAPI,\n  usersAPI,\n  systemAPI,\n  authAPI,\n  notificationsAPI,\n  adminWS,\n  apiUtils\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}