{"ast":null,"code":"// admin/src/services/api.js\nimport axios from 'axios';\n\n// Configurazione base API\nconst API_BASE_URL = process.env.REACT_APP_API_BASE_URL || 'http://localhost:3001';\n\n// Crea istanza axios con configurazione comune\nconst apiClient = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 10000,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Interceptor per aggiungere token JWT\napiClient.interceptors.request.use(config => {\n  const token = localStorage.getItem('adminToken');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => Promise.reject(error));\n\n// Interceptor per gestire errori di autenticazione\napiClient.interceptors.response.use(response => response, error => {\n  var _error$response;\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n    localStorage.removeItem('adminToken');\n    window.location.href = '/login';\n  }\n  return Promise.reject(error);\n});\n\n// ==========================================\n// API DASHBOARD & STATISTICHE\n// ==========================================\nexport const dashboardAPI = {\n  // Statistiche generali sistema\n  async getStats() {\n    const response = await apiClient.get('/api/admin/stats');\n    return response.data;\n  },\n  // Stato servizi sistema\n  async getSystemStatus() {\n    const response = await apiClient.get('/api/admin/system-status');\n    return response.data;\n  },\n  // Grafici statistiche temporali\n  async getChartsData(timeRange = '7d') {\n    const response = await apiClient.get(`/api/admin/charts/${timeRange}`);\n    return response.data;\n  },\n  // Log attivitÃ  recente\n  async getRecentLogs(limit = 10) {\n    const response = await apiClient.get(`/api/admin/logs?limit=${limit}`);\n    return response.data;\n  }\n};\n\n// ==========================================\n// API GESTIONE ELEZIONI\n// ==========================================\nexport const electionsAPI = {\n  // Lista tutte le elezioni\n  async getElections(status = 'all') {\n    const response = await apiClient.get(`/api/admin/elections?status=${status}`);\n    return response.data;\n  },\n  // Dettagli elezione specifica\n  async getElection(electionId) {\n    const response = await apiClient.get(`/api/admin/elections/${electionId}`);\n    return response.data;\n  },\n  // Crea nuova elezione\n  async createElection(electionData) {\n    const response = await apiClient.post('/api/admin/elections', electionData);\n    return response.data;\n  },\n  // Aggiorna elezione\n  async updateElection(electionId, electionData) {\n    const response = await apiClient.put(`/api/admin/elections/${electionId}`, electionData);\n    return response.data;\n  },\n  // Avvia elezione\n  async startElection(electionId) {\n    const response = await apiClient.post(`/api/admin/elections/${electionId}/start`);\n    return response.data;\n  },\n  // Chiudi elezione\n  async endElection(electionId) {\n    const response = await apiClient.post(`/api/admin/elections/${electionId}/end`);\n    return response.data;\n  },\n  // Risultati elezione\n  async getResults(electionId) {\n    const response = await apiClient.get(`/api/admin/elections/${electionId}/results`);\n    return response.data;\n  },\n  // Statistiche voti in tempo reale\n  async getVoteStats(electionId) {\n    const response = await apiClient.get(`/api/admin/elections/${electionId}/vote-stats`);\n    return response.data;\n  }\n};\n\n// ==========================================\n// API GESTIONE UTENTI\n// ==========================================\nexport const usersAPI = {\n  // Lista utenti registrati\n  async getUsers(page = 1, limit = 50, status = 'all') {\n    const response = await apiClient.get(`/api/admin/users?page=${page}&limit=${limit}&status=${status}`);\n    return response.data;\n  },\n  // Dettagli utente specifico\n  async getUser(userId) {\n    const response = await apiClient.get(`/api/admin/users/${userId}`);\n    return response.data;\n  },\n  // Aggiorna stato utente\n  async updateUserStatus(userId, status) {\n    const response = await apiClient.put(`/api/admin/users/${userId}/status`, {\n      status\n    });\n    return response.data;\n  },\n  // Whitelist elettori\n  async getWhitelist() {\n    const response = await apiClient.get('/api/admin/whitelist');\n    return response.data;\n  },\n  // Aggiungi alla whitelist\n  async addToWhitelist(userData) {\n    const response = await apiClient.post('/api/admin/whitelist', userData);\n    return response.data;\n  },\n  // Rimuovi dalla whitelist\n  async removeFromWhitelist(email) {\n    const response = await apiClient.delete(`/api/admin/whitelist/${email}`);\n    return response.data;\n  },\n  // Statistiche registrazioni\n  async getRegistrationStats() {\n    const response = await apiClient.get('/api/admin/users/stats');\n    return response.data;\n  }\n};\n\n// ==========================================\n// API BLOCKCHAIN & SISTEMA\n// ==========================================\nexport const systemAPI = {\n  // Stato blockchain\n  async getBlockchainStatus() {\n    const response = await apiClient.get('/api/admin/blockchain/status');\n    return response.data;\n  },\n  // Impostazioni sistema\n  async getSettings() {\n    const response = await apiClient.get('/api/admin/settings');\n    return response.data;\n  },\n  // Aggiorna impostazioni\n  async updateSettings(settings) {\n    const response = await apiClient.put('/api/admin/settings', settings);\n    return response.data;\n  },\n  // Backup database\n  async createBackup() {\n    const response = await apiClient.post('/api/admin/backup');\n    return response.data;\n  },\n  // Lista backup\n  async getBackups() {\n    const response = await apiClient.get('/api/admin/backups');\n    return response.data;\n  },\n  // Ripristina backup\n  async restoreBackup(backupId) {\n    const response = await apiClient.post(`/api/admin/backups/${backupId}/restore`);\n    return response.data;\n  },\n  // Log di sistema\n  async getSystemLogs(level = 'all', limit = 100) {\n    const response = await apiClient.get(`/api/admin/logs?level=${level}&limit=${limit}`);\n    return response.data;\n  }\n};\n\n// ==========================================\n// API AUTENTICAZIONE ADMIN\n// ==========================================\nexport const authAPI = {\n  // Login admin\n  async login(credentials) {\n    const response = await apiClient.post('/api/admin/auth/login', credentials);\n    if (response.data.token) {\n      localStorage.setItem('adminToken', response.data.token);\n    }\n    return response.data;\n  },\n  // Logout admin\n  async logout() {\n    localStorage.removeItem('adminToken');\n    await apiClient.post('/api/admin/auth/logout');\n  },\n  // Verifica token\n  async verifyToken() {\n    const response = await apiClient.get('/api/admin/auth/verify');\n    return response.data;\n  },\n  // Cambio password\n  async changePassword(oldPassword, newPassword) {\n    const response = await apiClient.post('/api/admin/auth/change-password', {\n      oldPassword,\n      newPassword\n    });\n    return response.data;\n  }\n};\n\n// ==========================================\n// WEBSOCKET PER REAL-TIME UPDATES\n// ==========================================\nexport class AdminWebSocket {\n  constructor() {\n    this.socket = null;\n    this.listeners = new Map();\n  }\n  connect() {\n    // Connessione WebSocket per aggiornamenti real-time\n    if (typeof io !== 'undefined') {\n      this.socket = io(`${API_BASE_URL}/admin`, {\n        auth: {\n          token: localStorage.getItem('adminToken')\n        }\n      });\n      this.socket.on('connect', () => {\n        console.log('WebSocket Admin connesso');\n      });\n      this.socket.on('disconnect', () => {\n        console.log('WebSocket Admin disconnesso');\n      });\n\n      // Eventi real-time\n      this.socket.on('stats-update', data => {\n        this.emit('stats-update', data);\n      });\n      this.socket.on('new-vote', data => {\n        this.emit('new-vote', data);\n      });\n      this.socket.on('user-registered', data => {\n        this.emit('user-registered', data);\n      });\n      this.socket.on('election-status-change', data => {\n        this.emit('election-status-change', data);\n      });\n    }\n  }\n  disconnect() {\n    if (this.socket) {\n      this.socket.disconnect();\n      this.socket = null;\n    }\n  }\n  on(event, callback) {\n    if (!this.listeners.has(event)) {\n      this.listeners.set(event, new Set());\n    }\n    this.listeners.get(event).add(callback);\n  }\n  off(event, callback) {\n    if (this.listeners.has(event)) {\n      this.listeners.get(event).delete(callback);\n    }\n  }\n  emit(event, data) {\n    if (this.listeners.has(event)) {\n      this.listeners.get(event).forEach(callback => callback(data));\n    }\n  }\n}\n\n// Istanza singleton WebSocket\nexport const adminWS = new AdminWebSocket();\nexport default {\n  dashboardAPI,\n  electionsAPI,\n  usersAPI,\n  systemAPI,\n  authAPI,\n  AdminWebSocket,\n  adminWS\n};","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_BASE_URL","apiClient","create","baseURL","timeout","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","response","_error$response","status","removeItem","window","location","href","dashboardAPI","getStats","get","data","getSystemStatus","getChartsData","timeRange","getRecentLogs","limit","electionsAPI","getElections","getElection","electionId","createElection","electionData","post","updateElection","put","startElection","endElection","getResults","getVoteStats","usersAPI","getUsers","page","getUser","userId","updateUserStatus","getWhitelist","addToWhitelist","userData","removeFromWhitelist","email","delete","getRegistrationStats","systemAPI","getBlockchainStatus","getSettings","updateSettings","settings","createBackup","getBackups","restoreBackup","backupId","getSystemLogs","level","authAPI","login","credentials","setItem","logout","verifyToken","changePassword","oldPassword","newPassword","AdminWebSocket","constructor","socket","listeners","Map","connect","io","auth","on","console","log","emit","disconnect","event","callback","has","set","Set","add","off","forEach","adminWS"],"sources":["/Users/fabiopaccosi/Projects/Personale/wabisabi_evoting/admin/src/services/api.js"],"sourcesContent":["// admin/src/services/api.js\nimport axios from 'axios';\n\n// Configurazione base API\nconst API_BASE_URL = process.env.REACT_APP_API_BASE_URL || 'http://localhost:3001';\n\n// Crea istanza axios con configurazione comune\nconst apiClient = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 10000,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Interceptor per aggiungere token JWT\napiClient.interceptors.request.use(\n  (config) => {\n    const token = localStorage.getItem('adminToken');\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) => Promise.reject(error)\n);\n\n// Interceptor per gestire errori di autenticazione\napiClient.interceptors.response.use(\n  (response) => response,\n  (error) => {\n    if (error.response?.status === 401) {\n      localStorage.removeItem('adminToken');\n      window.location.href = '/login';\n    }\n    return Promise.reject(error);\n  }\n);\n\n// ==========================================\n// API DASHBOARD & STATISTICHE\n// ==========================================\nexport const dashboardAPI = {\n  // Statistiche generali sistema\n  async getStats() {\n    const response = await apiClient.get('/api/admin/stats');\n    return response.data;\n  },\n\n  // Stato servizi sistema\n  async getSystemStatus() {\n    const response = await apiClient.get('/api/admin/system-status');\n    return response.data;\n  },\n\n  // Grafici statistiche temporali\n  async getChartsData(timeRange = '7d') {\n    const response = await apiClient.get(`/api/admin/charts/${timeRange}`);\n    return response.data;\n  },\n\n  // Log attivitÃ  recente\n  async getRecentLogs(limit = 10) {\n    const response = await apiClient.get(`/api/admin/logs?limit=${limit}`);\n    return response.data;\n  }\n};\n\n// ==========================================\n// API GESTIONE ELEZIONI\n// ==========================================\nexport const electionsAPI = {\n  // Lista tutte le elezioni\n  async getElections(status = 'all') {\n    const response = await apiClient.get(`/api/admin/elections?status=${status}`);\n    return response.data;\n  },\n\n  // Dettagli elezione specifica\n  async getElection(electionId) {\n    const response = await apiClient.get(`/api/admin/elections/${electionId}`);\n    return response.data;\n  },\n\n  // Crea nuova elezione\n  async createElection(electionData) {\n    const response = await apiClient.post('/api/admin/elections', electionData);\n    return response.data;\n  },\n\n  // Aggiorna elezione\n  async updateElection(electionId, electionData) {\n    const response = await apiClient.put(`/api/admin/elections/${electionId}`, electionData);\n    return response.data;\n  },\n\n  // Avvia elezione\n  async startElection(electionId) {\n    const response = await apiClient.post(`/api/admin/elections/${electionId}/start`);\n    return response.data;\n  },\n\n  // Chiudi elezione\n  async endElection(electionId) {\n    const response = await apiClient.post(`/api/admin/elections/${electionId}/end`);\n    return response.data;\n  },\n\n  // Risultati elezione\n  async getResults(electionId) {\n    const response = await apiClient.get(`/api/admin/elections/${electionId}/results`);\n    return response.data;\n  },\n\n  // Statistiche voti in tempo reale\n  async getVoteStats(electionId) {\n    const response = await apiClient.get(`/api/admin/elections/${electionId}/vote-stats`);\n    return response.data;\n  }\n};\n\n// ==========================================\n// API GESTIONE UTENTI\n// ==========================================\nexport const usersAPI = {\n  // Lista utenti registrati\n  async getUsers(page = 1, limit = 50, status = 'all') {\n    const response = await apiClient.get(`/api/admin/users?page=${page}&limit=${limit}&status=${status}`);\n    return response.data;\n  },\n\n  // Dettagli utente specifico\n  async getUser(userId) {\n    const response = await apiClient.get(`/api/admin/users/${userId}`);\n    return response.data;\n  },\n\n  // Aggiorna stato utente\n  async updateUserStatus(userId, status) {\n    const response = await apiClient.put(`/api/admin/users/${userId}/status`, { status });\n    return response.data;\n  },\n\n  // Whitelist elettori\n  async getWhitelist() {\n    const response = await apiClient.get('/api/admin/whitelist');\n    return response.data;\n  },\n\n  // Aggiungi alla whitelist\n  async addToWhitelist(userData) {\n    const response = await apiClient.post('/api/admin/whitelist', userData);\n    return response.data;\n  },\n\n  // Rimuovi dalla whitelist\n  async removeFromWhitelist(email) {\n    const response = await apiClient.delete(`/api/admin/whitelist/${email}`);\n    return response.data;\n  },\n\n  // Statistiche registrazioni\n  async getRegistrationStats() {\n    const response = await apiClient.get('/api/admin/users/stats');\n    return response.data;\n  }\n};\n\n// ==========================================\n// API BLOCKCHAIN & SISTEMA\n// ==========================================\nexport const systemAPI = {\n  // Stato blockchain\n  async getBlockchainStatus() {\n    const response = await apiClient.get('/api/admin/blockchain/status');\n    return response.data;\n  },\n\n  // Impostazioni sistema\n  async getSettings() {\n    const response = await apiClient.get('/api/admin/settings');\n    return response.data;\n  },\n\n  // Aggiorna impostazioni\n  async updateSettings(settings) {\n    const response = await apiClient.put('/api/admin/settings', settings);\n    return response.data;\n  },\n\n  // Backup database\n  async createBackup() {\n    const response = await apiClient.post('/api/admin/backup');\n    return response.data;\n  },\n\n  // Lista backup\n  async getBackups() {\n    const response = await apiClient.get('/api/admin/backups');\n    return response.data;\n  },\n\n  // Ripristina backup\n  async restoreBackup(backupId) {\n    const response = await apiClient.post(`/api/admin/backups/${backupId}/restore`);\n    return response.data;\n  },\n\n  // Log di sistema\n  async getSystemLogs(level = 'all', limit = 100) {\n    const response = await apiClient.get(`/api/admin/logs?level=${level}&limit=${limit}`);\n    return response.data;\n  }\n};\n\n// ==========================================\n// API AUTENTICAZIONE ADMIN\n// ==========================================\nexport const authAPI = {\n  // Login admin\n  async login(credentials) {\n    const response = await apiClient.post('/api/admin/auth/login', credentials);\n    if (response.data.token) {\n      localStorage.setItem('adminToken', response.data.token);\n    }\n    return response.data;\n  },\n\n  // Logout admin\n  async logout() {\n    localStorage.removeItem('adminToken');\n    await apiClient.post('/api/admin/auth/logout');\n  },\n\n  // Verifica token\n  async verifyToken() {\n    const response = await apiClient.get('/api/admin/auth/verify');\n    return response.data;\n  },\n\n  // Cambio password\n  async changePassword(oldPassword, newPassword) {\n    const response = await apiClient.post('/api/admin/auth/change-password', {\n      oldPassword,\n      newPassword\n    });\n    return response.data;\n  }\n};\n\n// ==========================================\n// WEBSOCKET PER REAL-TIME UPDATES\n// ==========================================\nexport class AdminWebSocket {\n  constructor() {\n    this.socket = null;\n    this.listeners = new Map();\n  }\n\n  connect() {\n    // Connessione WebSocket per aggiornamenti real-time\n    if (typeof io !== 'undefined') {\n      this.socket = io(`${API_BASE_URL}/admin`, {\n        auth: {\n          token: localStorage.getItem('adminToken')\n        }\n      });\n\n      this.socket.on('connect', () => {\n        console.log('WebSocket Admin connesso');\n      });\n\n      this.socket.on('disconnect', () => {\n        console.log('WebSocket Admin disconnesso');\n      });\n\n      // Eventi real-time\n      this.socket.on('stats-update', (data) => {\n        this.emit('stats-update', data);\n      });\n\n      this.socket.on('new-vote', (data) => {\n        this.emit('new-vote', data);\n      });\n\n      this.socket.on('user-registered', (data) => {\n        this.emit('user-registered', data);\n      });\n\n      this.socket.on('election-status-change', (data) => {\n        this.emit('election-status-change', data);\n      });\n    }\n  }\n\n  disconnect() {\n    if (this.socket) {\n      this.socket.disconnect();\n      this.socket = null;\n    }\n  }\n\n  on(event, callback) {\n    if (!this.listeners.has(event)) {\n      this.listeners.set(event, new Set());\n    }\n    this.listeners.get(event).add(callback);\n  }\n\n  off(event, callback) {\n    if (this.listeners.has(event)) {\n      this.listeners.get(event).delete(callback);\n    }\n  }\n\n  emit(event, data) {\n    if (this.listeners.has(event)) {\n      this.listeners.get(event).forEach(callback => callback(data));\n    }\n  }\n}\n\n// Istanza singleton WebSocket\nexport const adminWS = new AdminWebSocket();\n\nexport default {\n  dashboardAPI,\n  electionsAPI,\n  usersAPI,\n  systemAPI,\n  authAPI,\n  AdminWebSocket,\n  adminWS\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}