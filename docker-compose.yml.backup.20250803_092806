services:
  # Database PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: evoting-postgres
    environment:
      POSTGRES_DB: evoting_wabisabi
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${DB_PASSWORD:-password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - evoting-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis per caching e sessioni
  redis:
    image: redis:7-alpine
    container_name: evoting-redis
    command: redis-server --requirepass ${REDIS_PASSWORD:-redis123}
    ports:
      - "6379:6379"
    networks:
      - evoting-network
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Server 1: API Gateway
  api-gateway:
    build:
      context: ./server1
      dockerfile: Dockerfile
    container_name: evoting-api-gateway
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      PORT: 3001
      AUTH_SERVICE_URL: http://auth-service:3002
      VOTE_SERVICE_URL: http://vote-service:3003
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis123}@redis:6379
    ports:
      - "3001:3001"
    depends_on:
      - redis
      - postgres
    networks:
      - evoting-network
    restart: unless-stopped

  # Server 2: Authentication & Credentials
  auth-service:
    build:
      context: ./server2
      dockerfile: Dockerfile
    container_name: evoting-auth-service
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      PORT: 3002
      DB_HOST: postgres
      DB_NAME: evoting_wabisabi
      DB_USER: postgres
      DB_PASS: ${DB_PASSWORD:-password}
      JWT_SECRET: ${JWT_SECRET:-your-secret-key}
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis123}@redis:6379
    ports:
      - "3002:3002"
    depends_on:
      - postgres
      - redis
    networks:
      - evoting-network
    restart: unless-stopped

  # Server 3: Vote Processing & Blockchain
  vote-service:
    build:
      context: ./server3
      dockerfile: Dockerfile
    container_name: evoting-vote-service
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      PORT: 3003
      DB_HOST: postgres
      DB_NAME: evoting_wabisabi
      DB_USER: postgres
      DB_PASS: ${DB_PASSWORD:-password}
      BITCOIN_NETWORK: ${BITCOIN_NETWORK:-testnet}
      BITCOIN_NODE_URL: ${BITCOIN_NODE_URL:-http://bitcoin-node:8332}
      BITCOIN_RPC_USER: ${BITCOIN_RPC_USER:-user}
      BITCOIN_RPC_PASS: ${BITCOIN_RPC_PASS:-pass}
    ports:
      - "3003:3003"
    depends_on:
      - postgres
      - bitcoin-node
    networks:
      - evoting-network
    restart: unless-stopped

  # Bitcoin Core Node (Testnet)
  bitcoin-node:
    image: ruimarinho/bitcoin-core:0.21
    container_name: evoting-bitcoin-node
    command:
      - -testnet
      - -server
      - -rpcuser=${BITCOIN_RPC_USER:-user}
      - -rpcpassword=${BITCOIN_RPC_PASS:-pass}
      - -rpcallowip=0.0.0.0/0
      - -rpcbind=0.0.0.0
      - -printtoconsole
    volumes:
      - bitcoin_data:/home/bitcoin/.bitcoin
    ports:
      - "18332:18332"  # Testnet RPC
      - "18333:18333"  # Testnet P2P
    networks:
      - evoting-network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: evoting-nginx
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - api-gateway
      - auth-service
      - vote-service
    networks:
      - evoting-network
    restart: unless-stopped

  # Prometheus per monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: evoting-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - evoting-network

  # Grafana per dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: evoting-grafana
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/dashboards:/var/lib/grafana/dashboards
    ports:
      - "3000:3000"
    networks:
      - evoting-network

volumes:
  postgres_data:
  redis_data:
  bitcoin_data:
  prometheus_data:
  grafana_data:

networks:
  evoting-network:
    driver: bridge