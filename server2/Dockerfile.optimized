# Multi-stage build per ottimizzare le immagini
FROM node:18-alpine AS dependencies

# Installa dipendenze di sistema
RUN apk add --no-cache \
    python3 \
    make \
    g++ \
    git

WORKDIR /app

# Copia solo package.json
COPY package.json ./

# Installa tutte le dipendenze (incluse dev per il build)
RUN npm install

# Stage di produzione
FROM node:18-alpine AS production

WORKDIR /app

# Copia solo le dipendenze di produzione dal stage precedente
COPY --from=dependencies /app/node_modules ./node_modules
COPY --from=dependencies /app/package.json ./package.json

# Copia il codice dell'applicazione
COPY app.js healthcheck.js ./

# Rimuovi dipendenze di sviluppo per ridurre la dimensione
RUN npm prune --production

# Crea utente non-root per sicurezza
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nodeuser -u 1001

USER nodeuser

# Esponi la porta
EXPOSE 3002

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=40s --retries=3 \
    CMD node healthcheck.js || exit 1

# Comando di avvio
CMD ["node", "app.js"]
